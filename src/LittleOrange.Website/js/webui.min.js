(function($){
    $.widget("webui.input", {
            options: {

            },
            _create: function(){
                var thiz = this;
                this._name = this.options.name || this.element.attr("name");
                this._defaultValue = this.options.defaultValue || this.element.data("defaultValue");
                this._required = this.options.required || this.element.data("required");
                this._validator = this.options.validator || this.element.data("validator");
                this._createTextElement();
                this._createMessagePopover();
                this._onCreated();
                if(this.element.is(":input")){
                    this.element.change(function(){
                        thiz._changed();
                    });
                }
                this.reset();
            },
            _createTextElement: function(){
                this._textElement = $("<p style=\"display: none\" class=\"form-control-static\"></p>");
                this.element.after(this._textElement);
            },
            _createMessagePopover: function(){
                this.element.popover({"content": "", placement: "right", trigger: "manual", container: "body"});
            },
            _onCreated: function(){
                
            },
            reset: function(){
                this.setValue(this._defaultValue);
            },
            _changed: function(){
                this.validate();
                var value = this.getValue();
                this._trigger("changed", null, value);
            },
            getName: function(){
                return this._name;
            },
            setError: function(error, message){
                if(error){
                    this.element.closest(".form-group").addClass("has-error");
                }
                else{
                     this.element.closest(".form-group").removeClass("has-error");
                }
                if(message){
                    this.element.attr('data-content', message).popover('show');
                }
                else{
                    this.element.popover('hide');
                }
            },
            _validateRequired: function(value){
                var result = {valid: true, message: null};
                if(this._required && !value){
                    result.valid = false;
                }
                return result;
            },
            _validateValidator: function(value){
                var result = {valid: true, message: null};
                if(this._validator){
                    result = window[this._validator](value);
                }
                return result;
            },
            validate: function(){
                var value = this.getValue(), result = null;
                result = this._validateRequired(value);
                if(result.valid){
                    result = this._validateValidator(value);
                }
                this.setError(!result.valid, result.message);
                return result.valid;
            },
            focus: function(){
                if(this.element.css("display") !== "none"){
                    this.element.focus();
                }
            },
            setValue: function(value){
                this.element.val(value);
                this._textElement.html(value);
            },
            getValue: function(){
                var value = this.element.val();
                return jQuery.trim(value);
            },
            setRequired: function(required){
                this._required = required;
            },
            getRequired: function(){
                return this._required;
            },
            setReadonly: function(readonly){
                this._readonly = readonly;
                var value = this.getValue();
                this.setValue(value);
                if(this._readonly){
                    this._textElement.show();
                    this.element.hide();
                }
                else{
                    this._textElement.hide();
                    this.element.show();
                }
            },
            getReadonly: function(){
                return this._readonly;
            }
        }
    );
})(jQuery);
(function($){
 $.widget("webui.textbox", $.webui.input, {
   options: {
    required: false,
                suggestions: null,
                name: null,
                defaultValue: null
            },
            _onCreated: function(){
                var regex = this.options.regex || this.element.data("regex");
                this._regexMessage = this.options.regexMessage || this.element.data("regexMessage");
                this._suggestions = this.options.suggestions || this.element.data("suggestions");
                
                if(this._suggestions){
                    this._createSuggestion();
                }
                if(regex){
                    this._regex = new RegExp(regex);
                }
            },
            _createSuggestion: function(){
                function split(val) {
                    return val.split(multipleSymbolRegex);
                }
                function extractLast(term) {
                    return split(term).pop();
                }

                var multipleSymbolRegex = /[,，、\\；;]\s*/,
                    multipleSymbolEndRegex = /[,，、\\；;]$/,
                    suggestions = this._suggestions;
                this.element.autocomplete({
                    source: function (request, response) {
                        response($.ui.autocomplete.filter(suggestions, extractLast(request.term)));
                    },
                    focus: function () {
                        return false;
                    },
                    minLength: 0,
                    select: function (event, ui) {
                        var val = $(this).val();
                        if (multipleSymbolEndRegex.test(val)) {
                            $(this).val( val + ui.item.value);
                        }
                        else {
                            $(this).val(ui.item.value);
                        }
                        return false;
                    }
                })
                .click(function () {
                    $(this).autocomplete("search", "");
                });
            }
        }
    );  
})(jQuery); 
(function($){
    $.widget("webui.dateInput", $.webui.input, {
            options: {
                required: false,
                name: null,
                defaultValue: null
            },
            _onCreated: function(){
                this.element.datepicker();
            },
            getValue: function(){
                var value = this.element.val();
                if(value){
                    return $.toISODate(value);
                }
                return null;
            },
            setValue: function(value){
                var dateFormat = $.formatDate(value);
                this.element.val(dateFormat);
                this._textElement.html(dateFormat);
            }
        }
    );
})(jQuery);
(function($){
    $.widget("webui.checkboxList", $.webui.input, {
            _onCreated: function(){
                var thiz = this;
                this.element.click(function(){
                    thiz._changed();
                });
            },
            getValue: function(){
                var value = this.element.find(":checked")
                    .map(function(){
                        return $(this).val();
                    })
                    .get();
                if(value.length){
                    return value;
                }
                else{
                    return null;
                }
            },
            setValue: function(value){
                if(value){
                    this.element.find("input").each(function(){
                        var index = $.inArray($(this).val(), value);
                        $(this).prop("checked", index > -1);
                    });

                    this._textElement.html(value.toString());
                }
                else{
                    this.element.find("input").each(function(){
                        $(this).prop("checked", false);
                    });

                    this._textElement.html("");
                }
            },
            setReadonly: function(readonly){
                this._readonly = readonly;
                this.element.find("input").prop("disabled", readonly);
            }
        }
    );
})(jQuery);
(function($){
    $.widget("webui.dateRangeInput", $.webui.input, {
            _onCreated: function(){
                var thiz = this, inputs;
                inputs = this.element.find("input");
                this._startInput = inputs.eq(0).dateInput().data("dateInput");
                this._endInput = inputs.eq(1).dateInput().data("dateInput");
                inputs.change(function(){
                    thiz._changed();
                });
            },
            validate: function(){
                var value = this.getValue(), result = null;
                
                result = this._validateRequired(value);
                if(result.valid){
                    result = this._validateValidator(value);
                }
                if(result.valid){
                    result = this._validateRange(value);
                }
                this.setError(!result.valid, result.message);
                return result.valid;
            },
            _validateRange: function(value){
                var result = {valid: true, message: null};
                if(value && value.start && value.end && (value.start > value.end)){
                    result.valid = false;
                    result.message = "最小值不能大于最大值";
                }
                return result;
            },
            focus: function(){
                this._startInput.focus();
            },
            getValue: function(){
                var start = this._startInput.getValue();
                var end = this._endInput.getValue();
                if(start || end){
                    return {start: start, end: end};
                }
                return null;
            },
            setValue: function(value){
                var start = null, end = null;
                if(value){
                    start = value.start;
                    end = value.end;
                }
                this._startInput.setValue(start);
                this._endInput.setValue(end);
                start = $.formatDate(start);
                end = $.formatDate(end);
                this._textElement.html(start + " - " + end);
            }
        }
    );
})(jQuery);
(function($){

    $.widget("webui.form", {
            options: {
                sections: null
            },
            _create: function(){
                var thiz = this;
                this._inputs = {};
                
                $.each($.webui.form.inputTypes, function(){
                    var typeName, inputs, input;
                    typeName = this.typeName;
                    inputs = $(this.selector)[typeName]();
                    inputs.each(function(){
                        input = $(this).data(typeName);
                        thiz._inputs[input.getName()] = input;
                    });
                });
            },
            getValue: function(){
                var value = {};
                $.each(this._inputs, function(name, input){
                    value[name] = input.getValue();
                });
                return value;
            },
            setValue: function(value){
                for(var name in value){
                    if(name in this._inputs){
                        this._inputs[name].setValue(value[name]);
                    }
                }
            },
            setReadonly: function(readonly){
                $.each(this._inputs, function(name, input){
                    input.setReadonly(readonly);
                });
            },
            reset: function(readonly){
                $.each(this._inputs, function(name, input){
                    input.reset(readonly);
                });
            },
            validate: function(){
                var invalidInputs = [];
                $.each(this._inputs, function(name, input){
                    if(!input.validate()){
                       invalidInputs.push(input);
                    }
                });
                if(invalidInputs.length > 0){
                    invalidInputs[0].focus();
                    return false;
                }
                return true;
            },
            getInput: function(name){
                return this._inputs[name];
            },
            setInput: function(name, input){
                this._inputs[name] = input;
            }
        }
    );
    
    $.webui.form.inputTypes = [
        {typeName: "checkboxList", selector: ".webui-checkboxList"},
        {typeName: "dateInput", selector: ".webui-dateInput"},
        {typeName: "dateRangeInput", selector: ".webui-dateRangeInput"},
        {typeName: "numberInput", selector: ".webui-numberInput"},
        {typeName: "numberRangeInput", selector: ".webui-numberRangeInput"},
        {typeName: "radioList", selector: ".webui-radioList"},
        {typeName: "simpleSelect", selector: ".webui-simpleSelect"},
        {typeName: "textarea", selector: ".webui-textarea"},
        {typeName: "textbox", selector: ".webui-textbox"},
        {typeName: "complexSelect", selector: ".webui-complexSelect"}
    ];

})(jQuery);

(function($){
    $.widget("webui.numberInput", $.webui.input, {
            options: {
                required: null,
                name: null,
                max: null,
                min: null,
                precision: null,
                defaultValue: null
            },
            _onCreated: function(){
                this._precision = this.options.precision || this.element.data("precision");
                this._max = this.options.max || this.element.data("max");
                this._min = this.options.min || this.element.data("min");
                if(this._precision > 0){
                    this._numberRegex = new RegExp("^[-,+]?[0-9]+(.[0-9]{0,${0}})?$".format(this._precision));
                }
                else{
                    this._numberRegex = new RegExp("^[-,+]?[0-9]*[1-9][0-9]*$");
                }
            },
            validate: function(){
                var value = this.getValue(), result = null;
                
                result = this._validateRequired(value);
                if(result.valid){
                    result = this._validateValidator(value);
                }
                if(result.valid){
                    result = this._validateFormat(value);
                }
                if(result.valid){
                    result = this._validateRange(value);
                }
                
                this.setError(!result.valid, result.message);
                return result.valid;
            },
            _validateFormat: function(value){
                var result = {valid: true, message: null};
                if(value){
                    if(!this._numberRegex.test(value)){
                        result.valid = false;
                        result.message = "格式错误！";
                    }
                }
                return result;
            },
            _validateRange: function(value){
                var result = {valid: true, message: null};
                if(value){
                    value = parseFloat(value);
                    if((value > this._max) || (value < this._min)){
                        result.valid = false;
                        result.message = "不能超出范围:"+ this._min + "-" + this._max;
                    }
                }
                return result;
            },
            getValue: function(){
                var value = this.element.val();
                value = parseFloat(value);
                if(!$.isNumeric(value)){
                    return null;
                }
                return value;
            },
            setValue: function(value){
                var text = "";
                value = parseFloat(value);
                if($.isNumeric(value)){
                    text = value.toFixed(this._precision);
                }
                else{
                    text = "";
                }
                this.element.val(text);
                this._textElement.html(text);
            }
        }
    );
})(jQuery);

(function($){
    $.widget("webui.numberRangeInput", $.webui.input, {
            options: {
                required: null,
                name: null,
                defaultValue: null
            },
            _onCreated: function(){
                var thiz = this, inputs;
                inputs = this.element.find("input");
                this._minInput = inputs.eq(0);
                this._maxInput = inputs.eq(1);
                inputs.change(function(){
                    thiz._changed();
                });
            },
            validate: function(){
                var value = this.getValue(), result = null;
                result = this._validateRequired(value);
                if(result.valid){
                    result = this._validateValidator(value);
                }
                if(result.valid){
                    result = this._validateRange(value);
                }
                this.setError(!result.valid, result.message);
                return result.valid;
            },
            _validateRange: function(value){
                var result = {valid: true, message: null};
                if(value && value.min > value.max){
                    result.valid = false;
                    result.message = "最小值不能大于最大值";
                }
                return result;
            },
            focus: function(){
                if(this._minInput.css("display") !== "none"){
                    this._minInput.focus();
                }
            },
            getValue: function(){
                var min = this._minInput.val(),
                    max = this._maxInput.val();

                min = this._parseFloat(min);
                max = this._parseFloat(max);
                if($.isNumeric(min) || $.isNumeric(max)){
                    return {min: min, max: max};
                }
                return null;
            },
            setValue: function(value){
                var min = "", max = "";
                if(value){
                    min = $.isNumeric(value.min) ? value.min : "";
                    max = $.isNumeric(value.max) ? value.max : "";
                }

                this._minInput.val(min);
                this._maxInput.val(max);
                this._textElement.html(min.toString() + " - " + max.toString());
            },
            _parseFloat: function(value){
                value = parseFloat(value);
                if($.isNumeric(value)){
                    return value;
                }
                else{
                    return null;
                }
            }
        }
    );
})(jQuery);
(function($){
    $.widget("webui.radioList", $.webui.input, {
            _onCreated: function(){
                var thiz = this;
                this.element.click(function(){
                    thiz._changed();
                });
            },
            getValue: function(){
                var checkedRadios = this.element.find(":checked");
                if(checkedRadios.length){
                    return checkedRadios.eq(0).val();
                }
                return null;
            },
            setValue: function(value){
                this.element.find("input").each(function(){
                    if(value && $(this).val() === value.toString()){
                        $(this).prop("checked", true);
                    }
                });

                this._textElement.html(value);
                if(value){
                    value = value.toString();
                    this.element.find("input").each(function(){
                        if($(this).val() === value){
                            $(this).prop("checked", true);
                        }
                    });

                    this._textElement.html(value);
                }
                else{
                    this.element.find("input").each(function(){
                        $(this).prop("checked", false);
                    });

                    this._textElement.html("");
                }
            },
            setReadonly: function(readonly){
                this._readonly = readonly;
                this.element.find("input").prop("disabled", readonly);
            }
        }
    );
})(jQuery);


(function($){
    $.widget("webui.textarea", $.webui.input, {
            setValue: function(value){
                if(value !== null && value !== undefined){
                    this.element.val(value);
                    value = value.replace(/\n/g, "</br>");
                    this._textElement.html(value);
                }
                else{
                    this.element.val("");
                    this._textElement.html("");
                }
            }
        }
    );
})(jQuery);
(function( $, undefined ) {

var cloumnDefaultWidth = 100;

$.widget( "webui.datagrid", $.webui.input, {
    _headerCells: null,
    _rows: null,
    options: {
        columns: null,
        singleSelect: false,
        width: null,
        height: null,
        data: null,
        showNumberColumn: false,
        name: null,
        defaultValue: null,
        required: false,
        readonly: false,
        hideHeader: false,
        bordered: true,
        textWrap: false
    },
    _onCreated: function() {
        var self = this, header, headerContent, body, bodyContent;
        this._headerCells = [];
        this._rows = [];
        this.element.addClass("ui-datagrid");
        
        if(this.options.columns === null || !this.options.columns.length){
            return;
        }
        header = this._header = $("<div class='ui-datagrid-header'><div class='ui-datagrid-header-content'><table class='table table-bordered'><thead><tr></tr></thead></table></div></div>");

        this.element.append(header);
        headerContent = this._headerContent = header.children(".ui-datagrid-header-content");
        
        body = this._body = $("<div class='ui-datagrid-body'><div class='ui-datagrid-body-content'><table class='table table-bordered table-hover'></table></div></div>");
        bodyContent = this._bodyContent = body.find("table");
        body.scroll(function(){
            header.scrollLeft($(this).scrollLeft());
        });
        this.element.append(body);
        
        if(!this.options.bordered){
            this.element.find("table").removeClass("table-bordered");
        }
        if(this.options.textWrap){
            this.element.addClass("wrap")
        }else{
            this.element.addClass("ellipsis")
        }

        if(!this.options.hideHeader){
            this._renderHeader();
        }
        this._renderWidth();
        this._renderHeight();
        $(window).resize(function() {
            self._renderWidth();
            self._renderHeight();
        });
    },
    _init: function(){
        this._renderBody();
    },
    _renderHeader: function(){
        this._renderHeaderNumberCell();
        this._renderHeaderCheckboxCell();
        this._renderHeaderCells();
    },
    _renderHeaderNumberCell: function(){
        this._header.find(".ui-datagrid-header-numbercell").remove();
        if(this.options.showNumberColumn){
            var th = $("<th class='ui-datagrid-header-numbercell' ><div class='ui-datagrid-header-cell'></div></th>");
            this._header.find("tr").append(th);
        }
    },
    _renderHeaderCheckboxCell: function(){
        var self = this, th;
        this._header.find(".ui-datagrid-header-checkbox-cell").remove();
        if(!this.options.singleSelect){
            th = $("<th class='ui-datagrid-header-checkbox-cell' ><div class='ui-datagrid-header-cell'><input type='checkbox'/></div></th>");
            th.click(function(ev){
                self._onHeaderCheckboxCell_click($(this));
                ev.stopPropagation();
            });
            this._header.find("tr").append(th);
        }
    },
    _renderHeaderCells: function(){
        var self = this, datagridHeight;
        if(this._headerCells && this._headerCells.length){
            $.each(this._headerCells, function () {
                $(this.element).remove();
            });
        }
        datagridHeight = self._getHeight();
        this._headerCells = [];
        $.each(this.options.columns, function(i, column){
            var cellElement, th, index, cellHeight, cell;
            cellElement = $("<div class='ui-datagrid-header-cell'></div>");
            if(column.sortDirection === "desc"){
                cellElement.append("<span class='ui-datagrid-header-sort-icon'>▼</span>");
            }
            else if(column.sortDirection === "asc"){
                cellElement.append("<span class='ui-datagrid-header-sort-icon'>▲</span>");
            }
            cellElement.append("<span class='ui-datagrid-header-title'>" + column.title + "</span>");
            th = $("<th></th>").append(cellElement);
            self._header.find("tr").append(th);
            index = self._header.find("th").index(th);
            cellHeight = cellElement.outerHeight();
            cellElement.resizable({
                handles: "e",
                helper: "ui-datagrid-resize-helper",
                resize: function (event, ui) {
                    ui.helper.css("height", datagridHeight);
                },
                start: function(){
                    datagridHeight = self._getHeight();
                },
                stop: function(event, ui){
                    ui.originalElement.css("height", "auto");
                    self._header.find("colgroup").find("col").eq(index).css("width", ui.size.width);
                    self._body.find("colgroup").find("col").eq(index).css("width", ui.size.width);
                    cellElement.css("width", ui.size.width);
                    
                }
            });
            cell = {element: th, column: column};
            self._headerCells.push(cell);
            cellElement.click(function(){
                if(self.options.canSort){
                    self.sortBy(column.name, self._toggleDirection(column.sortDirection));
                }
            });
        });
    },
    _toggleDirection: function(direction){
        if(direction === "desc"){
            return "asc";
        }else{
            return "desc";
        }
    },
    sortBy: function(columnName, direction){
        var cells, cell;
        cells = $.grep(this._headerCells, function(cell){
            return cell.column.name === columnName;
        });
        if(cells && cells.length){
            this._header.find(".ui-datagrid-header-sort-icon").remove();
            cell = cells[0];
            cell.column.sortDirection = direction;
            if(direction === "desc"){
                cell.element.find(".ui-datagrid-header-cell").append("<span class='ui-datagrid-header-sort-icon'>▼</span>");
            }
            else if(direction === "asc"){
                cell.element.find(".ui-datagrid-header-cell").append("<span class='ui-datagrid-header-sort-icon'>▲</span>");
            }
            this._trigger("sort", null, columnName + " " + direction);
        }
    },
    _renderHeight: function(){
        var height = this._getHeight(), headerHeight;
        if(height){
            headerHeight = this._header.height();
            if(height >= headerHeight){
                this._body.height(height - headerHeight);
            }
        }
    },
    _getHeight: function () {
        var height, documentHeight, bodyPaddingHeight, parentHeight;
        if(this.options.height === "auto"){
            documentHeight= $(window).height();
            bodyPaddingHeight = $(document.body).innerHeight() - $(document.body).height();
            parentHeight = this.element.parent().height() - this.element.height();
            height  = documentHeight - parentHeight - bodyPaddingHeight;
        }
        else if(this.options.height){
            height = this.options.height;
        }
        return height;
    },
    _renderWidth: function(){
        if(this.options.width){
            this._header.css("width", this.options.width);
            this._body.css("width", this.options.width);
            this._headerContent.css("width", this.options.width);
            var headerTableWidth = this._headerContent.find("table").width();
            if(this._headerContent.width() < headerTableWidth + 30){
                this._headerContent.width(headerTableWidth + 30);
            }
        }
        
        var colgroup = this._getColgroup();
        this._header.find("colgroup").remove();
        this._body.find("colgroup").remove();
        this._header.find("table").prepend(colgroup);
        this._body.find("table").prepend(colgroup);
    },
    _getColgroup: function(){
        var colsHtml = "", width;
        if(this.options.showNumberColumn){
            colsHtml += "<col style='width: 30px'>";
        }
        if(!this.options.singleSelect){
            colsHtml += "<col style='width: 30px'>";
        }
        var headerWidth = this._header.width();
        $.each(this.options.columns, function(i, column){
            if($.isNumeric(column.width)){
                width = column.width;
            }
            else if(/%$/.test(column.width)){
                width = column.width;
                width = parseInt(column.width) * 0.01 * headerWidth;
            }
            else{
                width = cloumnDefaultWidth;
            }
            colsHtml += "<col style='width: "+width+"px'>";
        });
        return "<colgroup>"+ colsHtml +"</colgroup>";
    },
    _renderBody: function(){
        var self = this;
        $.each(this._rows, function(i, row){
            self.deleteRow(row);
        });
        this._rows = [];
        if(this.options.data && this.options.data.length){
            $.each(this.options.data, function(i, data){
                self.appendRow(data);
            });
        }
    },
    appendRow: function(data){
        var self = this, datarow;
        datarow = $("<tr></tr>");
        this._bodyContent.append(datarow);
        datarow.datarow({
            columns: this.options.columns,
            showNumberCell: this.options.showNumberColumn,
            showCheckboxCell: !this.options.singleSelect,
            data: data
        })
        .bind("datarowselected", function(evt, row){self._onDatarow_selected(row);})
        .bind("datarowunselected", function(evt, row){self._onDatarow_unselected(row);});

        this._rows.push(datarow);
        this._refreshNumberRow();
        this._trigger("addedRow", null, {row: datarow, data: data});
    },
    afterRow: function(data, datarow1){
        var self = this, datarow;
        datarow = $("<tr></tr>");
        datarow1.after(datarow);
        datarow.datarow({
            columns: this.options.columns,
            showNumberCell: this.options.showNumberColumn,
            showCheckboxCell: !this.options.singleSelect,
            data: data
        })
        .bind("datarowselected", function(evt, row){self._onDatarow_selected(row);})
        .bind("datarowunselected", function(evt, row){self._onDatarow_unselected(row);});

        this._rows.push(datarow);
        this._refreshNumberRow();
        this._trigger("addedRow", null, {row: datarow, data: data});
        return datarow;
    },
    _onDatarow_selected: function(row){
        if(this._bodyContent.find(".active").length === this._rows.length){
            this._header.find(".ui-datagrid-header-checkbox-cell input").attr("checked", "checked");
        }
        this._trigger("selectedRow", null, row);
    },
    _onDatarow_unselected: function(row){
        this._header.find(".ui-datagrid-header-checkbox-cell input").removeAttr("checked");
        this._trigger("unselectedRow", null, row);
    },
    _onHeaderCheckboxCell_click: function(cell){
        if(cell.find("input").prop("checked")){
            this.selectAllRow();
        }
        else{
            this.unselectAllRow();
        }
    },
    selectAllRow: function(){
        $.each(this._rows, function(i, row){
            row.datarow("select");
        });
    },
    unselectAllRow: function(){
        $.each(this._rows, function(i, row){
            row.datarow("unselect");
        });
    },
    _refreshNumberRow: function(){
        if(this.options.showNumberColumn){
            var numberRows = this._bodyContent.find("tr td:first-child"), i = 0;
            for(; i < numberRows.length; i++){
                numberRows.eq(i).text(i + 1);
            }
        }
    },
    updateRow: function(index, data){
        if(this._rows[index]){
            this._rows[index].datarow("option", "data", data);
            this._trigger("updatedRow", null, {row: this._rows[index], data: data});
        }
    },
    selectRow: function(index){
        if(this._rows[index]){
            this._rows[index].datarow("select");
        }
    },
    unselectRow: function(index){
        if(this._rows[index]){
            this._rows[index].datarow("unselect");
        }
    },
    getRows: function(){
        return this._rows;
    },
    getRowsData: function(){
        return $.map(this._rows, function(row){
            return row.datarow("option", "data");
        });
    },
    deleteSelectedRows: function(){
        var self = this, selectRows;
        selectRows = this.getSelectedRows();
        $.each(selectRows, function(i, row){
            self.deleteRow(row);
        });
    },
    getSelectedRows: function(){
        var selectRows = $.grep(this._rows, function(row){
            return row.datarow("isSelected");
        });
        return selectRows;
    },
    getSelectedRow: function(){
        var selectRows = this.getSelectedRows();
        if(selectRows && selectRows.length){
            return selectRows[0];
        }
        return null;
    },
    deleteRow: function(deletedRow){
        if(typeof deletedRow === "number"){
            deletedRow = this._rows[deletedRow];
        }
        if(!deletedRow){
            return;
        }
        var self = this, rows = [], data;
        $.each(this._rows, function(i, row){
            if(row !== deletedRow){
                rows.push(row);
            }else{
                data = row.datarow("option", "data");
                row.remove();
                self._trigger("deletedRow", null, data);
            }
        });
        this._rows = rows;
        this._header.find(".ui-datagrid-header-checkbox-cell input").removeAttr("checked");
        this._refreshNumberRow();
    },
    setValue: function(value){
        this.options.data = value;
        this._renderBody();
    },
    getValue: function(){
        return this.getRowsData();
    },
    setReadonly: function(readonly){
        this._readonly = readonly;
    },
    _setOption: function(key, value){
        var self = this;
        $.Widget.prototype._setOption.apply(self, arguments);
        switch(key){
            case "width": this._renderWidth();break;
            case "height": this._renderHeight();break;
            case "showNumberColumn":
                this._renderHeaderNumberCell();
                $.each(this._rows, function(i, row){
                    row.datarow("option", "showNumberCell", value);
                });
                break;
            case "singleSelect":
                this._renderHeaderCheckboxCell();
                $.each(this._rows, function(i, row){
                    row.datarow("option", "showCheckboxCell", !value);
                });
                break;
            case "data": this._renderBody();break;
            case "columns":
                this._renderHeaderCells();
                $.each(this._rows, function(i, row){
                    row.datarow("option", "columns", value);
                });
                break;
        }
    }
});

$.widget( "webui.datarow",{
    _cells: null,
    _selected: null,
    options: {
        columns: null,
        showNumberCell: null,
        showCheckboxCell: null,
        data: null
    },
    _create: function() {
        var self = this;
        this._cells = [];
        this._selected = false;
        this.element
            .click(function(){
                if(self._selected){
                    self.unselect();
                }
                else{
                    self.select();
                }
            });
        
        this._render();
    },
    _render: function(){
        this.element.empty();
        this._renderNumberCell();
        this._renderCheckboxCell();
        this._renderDataCells();
    },
    _renderDataCells: function(){
        var self = this, data = this.options.data, cell, td;
        this._cells = [];
        $.each(this.options.columns, function(i, column){
            cell = {};
            cell.column = column;
            td = $("<td class='ui-datagrid-cell'></td>");
            self.element.append(td);
            cell.element = td;
            self._renderCell(cell, data);
            self._cells.push(cell);
        });
    },
    _renderNumberCell: function(){
        if(this.options.showNumberCell){
            var td = $("<td class='ui-datagrid-numbercell'></td>");
            this.element.append(td);
        }
    },
    _renderCheckboxCell: function(){
        var self = this, td;
        if(this.options.showCheckboxCell){
            td = $("<td class='ui-datagrid-checkbox-cell'><input type='checkbox'/></td>");
            td.click(function(ev){
                if(!$(ev.target).is("input")){
                    if($(this).find("input").attr("checked") === "checked"){
                        $(this).find("input").removeAttr("checked");
                    }
                    else{
                        $(this).find("input").attr("checked", "checked");
                    }
                }
                self._onCheckboxCell_click($(this), self.element);
                ev.stopPropagation();
            });
            self.element.append(td);
        }
    },
    _renderCell: function(td, data){
        var self = this, cell = td.element, column = td.column, fieldValue = null, renderValue;
        cell.empty();
        if(column.field && data[column.field]){
            fieldValue = data[column.field];
        }
        if(column.render){
            renderValue = column.render(self.element, {data: data, value: fieldValue} );
            if(typeof renderValue === "string"){
                cell.html(renderValue);
            }
            else if(typeof renderValue === "object"){
                cell.append(renderValue);
            }
        }
        else if(column.field){
            cell.html(fieldValue).attr("title", fieldValue);
        }
    },
    _onCheckboxCell_click: function(sender){
        if(sender.find("input").attr("checked") === "checked"){
            this.select();
        }
        else{
            this.unselect();
        }
    },
    select: function(){
        if(this.options.showCheckboxCell){
            this.element.find(".ui-datagrid-checkbox-cell input").prop("checked", true);
        }
        this.element.addClass("active");
        this._selected = true;
        this._trigger("selected", null, this.element);
    },
    unselect: function(){
        this.element.removeClass("active")
            .find(".ui-datagrid-checkbox-cell input")
            .prop("checked", false);
        this._selected = false;
        this._trigger("unselected", null, this.element);
    },
    _update: function(data){
        var self = this;
        $.each(this._cells, function(i, cell){
            self._renderCell(cell, data);
        });
    },
    isSelected: function(){
        return this._selected;
    },
    _setOption: function(key, value){
        var self = this;
        $.Widget.prototype._setOption.apply(self, arguments);
        switch(key){
            case "data":this._update(value);break;
            case "showNumberCell": this._renderNumberCell();break;
            case "showCheckboxCell": this._renderCheckboxCell();break;
            case "columns": this._renderDataCells();break;
        }
    }
});
}( jQuery ) );

(function($){
    $.widget("webui.simpleSelect", $.webui.input, {
        }
    );
})(jQuery);
(function($){
    $.widget("ui.messageBox", {
        options: {
            
        },
        _create: function () {
            var thiz = this;
            var template =
             '<div class="modal">'+
                '<div class="modal-dialog" style="width: 400px; margin: 200px auto;">'+
                    '<div class="modal-content">'+
                        '<div class="modal-header">'+
                            '<h4 class="modal-title">提示</h4>'+
                        '</div>'+
                        '<div class="modal-body">'+
                            '<span class="glyphicon" style="vertical-align:middle; font-size:34px;"></span>'+
                            '<span class="message-box-content" style="display: inline-block; margin-left: 2em;">sdfsdfsd</span>'+
                        '</div>'+
                        '<div class="modal-footer">'+
                            '<input type="button" class="btn btn-ok btn-default" data-dismiss="modal" value="确定" />'+
                            '<input type="button" class="btn btn-cancel btn-default" data-dismiss="modal" value="取消" />'+
                        '</div>'+
                    '</div>'+
                '</div>'+
            '</div>';
            var $template = $(template);
            this._messageContent = $template.find(".message-box-content");
            this._messageIcon = $template.find(".glyphicon");
            this._btnOk = $template.find(".btn-ok").click(function(){
                if(thiz._okCallback){
                    var callback = thiz._okCallback;
                    thiz._okCallback = null;
                    callback();
                }
            });
            this._btnCancel = $template.find(".btn-cancel").click(function(){
                if(thiz._cancelCallback){
                    var callback = thiz._cancelCallback;
                    thiz._cancelCallback = null;
                    callback();
                }
            });
            this._modal = $template.modal({ show: false, backdrop: "static" }).appendTo("body").data("bs.modal");
            $("body").append(template);
        },
        info: function(msg, callback){
            this._okCallback = callback;
            this._modal.show();
            this._btnOk.focus();
            this._messageContent.text(msg);
            this._btnCancel.hide();
            this._messageIcon.attr("class", "").addClass("glyphicon glyphicon-info-sign text-primary");
        },
        warning: function(msg, callback){
            this._okCallback = callback;
            this._modal.show();
            this._btnOk.focus();
            this._messageContent.text(msg);
            this._btnCancel.hide();
            this._messageIcon.attr("class", "").addClass("glyphicon glyphicon-info-sign text-warning");
        },
        confirm: function(msg, okCallback, cancelCallback){
            this._okCallback = okCallback;
            this._cancelCallback = cancelCallback;
            this._modal.show();
            this._btnOk.focus();
            this._messageContent.text(msg);
            this._btnCancel.show();
            this._messageIcon.attr("class", "").addClass("glyphicon glyphicon-question-sign text-primary");
        },
        success: function(msg, callback){
            this._okCallback = callback;
            this._modal.show();
            this._btnOk.focus();
            this._messageContent.text(msg);
            this._btnCancel.hide();
            this._messageIcon.attr("class", "").addClass("glyphicon glyphicon-ok-sign text-success");
        }
    });
})(jQuery); 

$(function(){
    $.messageBox = $("body").messageBox().data("messageBox");
})